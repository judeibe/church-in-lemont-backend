name: Release Workflow

on:
  push:
    tags:
      - v*

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        name: "☁️ Checkout repository"

      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2
        name: "📦 Setup pnpm"
        with:
          run_install: false

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with: 
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: "🧶 Install dependencies"
        run: pnpm install

      - name: "🧪 Run tests"
        run: pnpm exec turbo test:cov

      - name: "🧪 Upload coverage"
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage

  lint:
    runs-on: ubuntu-latest
    name: Code Standards
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        name: "☁️ Checkout repository"

      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2
        name: "📦 Setup pnpm"
        with:
          run_install: false

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with: 
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: "🧶 Install dependencies"
        run: pnpm install

      - name: "🧪 Run lint"
        run: pnpm exec turbo lint

  codacy-coverage-reporter:
    runs-on: ubuntu-latest
    name: Codacy Coverage Reporter
    needs: test
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        name: "☁️ Checkout repository"

      - uses: actions/download-artifact@v4
        name: "📦 Download code coverage report"
        with:
          name: code-coverage-report

      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2
        name: "📦 Setup pnpm"
        with:
          run_install: false

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@89d6c85cfafaec52c72b6c5e8b2878d33104c699
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  end-to-end-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        name: "☁️ Checkout repository"

      - uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2
        name: "📦 Setup pnpm"
        with:
          run_install: false

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with: 
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: "🧶 Install dependencies"
        run: pnpm install

      - name: "🧪 Run end-to-end tests"
        run: pnpm exec turbo test:e2e

  release:
    runs-on: ubuntu-latest
    environment: production
    name: Release
    timeout-minutes: 10
    needs:
      - test
      - lint
      - codacy-coverage-reporter
      - end-to-end-tests
    steps:
      - name: "🧪 Run release"
        shell: bash
        run: |
          response=$(curl --request GET '${{ secrets.COOLIFY_WEBHOOK }}' --header 'Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}' --silent)
          deployment_uuid=$(echo $response | jq -r '.deployments[].deployment_uuid')
          url="http://coolify.judeibe.com/api/v1/deployments/${deployment_uuid}"

          # Initialize deployment_status
          deployment_status=""
          previous_status=""

          # Loop until deployment_status is "finished" or "failed"
          while [[ "$deployment_status" != "finished" && "$deployment_status" != "failed" ]]; do
            deployment_status=$(curl --request GET "$url" --header 'Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}' --silent | jq -r '.status')

            # Only echo the status if it has changed
            if [[ "$deployment_status" != "$previous_status" ]]; then
              echo "Current status: $deployment_status"
              previous_status=$deployment_status
            fi
            
            # If status is "failed", exit the script with a non-zero status code to fail the step
            if [[ "$deployment_status" == "failed" ]]; then
              echo "Deployment failed. Exiting with error."
              exit 1
            fi

            # If status is "finished", break the loop
            if [[ "$deployment_status" == "finished" ]]; then
              echo "Deployment completed successfully."
              break
            fi

            # Wait for 5 seconds before the next check
            sleep 5
          done


